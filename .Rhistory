maxDate <- 1626
multiparty.interactions$DateOne.Year > minDate
sum(multiparty.interactions$DateOne.Year > minDate)
View(multiparty.interactions)
selected.interactions <- multiparty.interactions
selected.interactions$DateOne.Year > minDate
selected.interactions[selected.interactions$DateOne.Year >= minDate &
selected.interactions$DateOne.Year <= maxDate &
selected.interactions$DateTwo.Year <= maxDate,]
minDate <- 1000
maxDate <- 2000
selected.interactions[selected.interactions$DateOne.Year >= minDate &
selected.interactions$DateOne.Year <= maxDate &
selected.interactions$DateTwo.Year <= maxDate,]
date.filtered <- selected.interactions[selected.interactions$DateOne.Year >= minDate &
selected.interactions$DateOne.Year <= maxDate &
selected.interactions$DateTwo.Year <= maxDate,]
nrow(date.filtered)
remove_missing(date.filtered)
nrow(remove_missing(date.filtered))
minDate <- 1600
maxDate <- 1610
selected.interactions <- multiparty.interactions
date.filtered <- selected.interactions[selected.interactions$DateOne.Year >= minDate &
selected.interactions$DateOne.Year <= maxDate &
selected.interactions$DateTwo.Year <= maxDate,]
nrow(remove_missing(date.filtered))
minDate <- 1600
maxDate <- 1610
selected.interactions <- multiparty.interactions
date.filtered <- selected.interactions[selected.interactions$DateOne.Year >= minDate &
selected.interactions$DateOne.Year <= maxDate &
selected.interactions$DateTwo.Year <= maxDate |
is.na(selected.interactions$DateTwo.Year),]
nrow(remove_missing(date.filtered))
minDate <- 1400
maxDate <- 1800
selected.interactions <- multiparty.interactions
date.filtered <- selected.interactions[selected.interactions$DateOne.Year >= minDate &
selected.interactions$DateOne.Year <= maxDate &
selected.interactions$DateTwo.Year <= maxDate |
is.na(selected.interactions$DateTwo.Year),]
nrow(remove_missing(date.filtered))
those.with.dateOneYear <- selected.interactions[!is.na(selected.interactions$DateOne.Year),]
nrow(those.with.dateOneYear)
those.with.dateOneYear$DateTwo.Year
table(those.with.dateOneYear$DateTwo.Year)
nrow(those.with.dateOneYear)
those.with.dateOneYear$DateTwo.Year <= minDate
those.with.dateOneYear$DateTwo.Year <= maxDate
those.with.dateOneYear$DateTwo.Year <= maxDate %in% TRUE
table(those.with.dateOneYear$DateTwo.Year)
those.with.dateOneYear$DateTwo.Year <= maxDate %in% TRUE
{those.with.dateOneYear$DateTwo.Year <= maxDate} %in% TRUE
those.with.dateOneYear[{those.with.dateOneYear$DateTwo.Year <= maxDate} %in% TRUE,]
those.with.dateOneYear[{those.with.dateOneYear$DateTwo.Year <= maxDate} %in% TRUE,]$DateTwo.Year
selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE,]
nrow(selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE,])
nrow(selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE &
{selected.interactions$DateOne.Year <= maxDate} %in% TRUE,])
maxDate <- 1600
nrow(selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE &
{selected.interactions$DateOne.Year <= maxDate} %in% TRUE,])
first.Date.Exists.And.In.Range <- selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE &
{selected.interactions$DateOne.Year <= maxDate} %in% TRUE ,]
first.Date.Exists.And.In.Range$DateTwo.Year
first.Date.Exists.And.In.Range$DateTwo.Year <= maxDate
isTRUE(first.Date.Exists.And.In.Range$DateTwo.Year <= maxDate
isTRUE(first.Date.Exists.And.In.Range$DateTwo.Year <= maxDate)
isTRUE(first.Date.Exists.And.In.Range$DateTwo.Year <= maxDate)
first.Date.Exists.And.In.Range$DateTwo.Year <= maxDate
first.Date.Exists.And.In.Range[first.Date.Exists.And.In.Range$DateTwo.Year <= maxDate |
is.na(first.Date.Exists.And.In.Range$DateTwo.Year),]$DateTwo.Year
minDate <- 1000
maxDate <- 1900
selected.interactions <- multiparty.interactions
those.with.dateOneYear <- selected.interactions[!is.na(selected.interactions$DateOne.Year),]
nrow(selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE,])
selected.interactions <- selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE &
{selected.interactions$DateOne.Year <= maxDate} %in% TRUE ,]
selected.interactions <- selected.interactions[selected.interactions$DateTwo.Year <= maxDate |
is.na(selected.interactions$DateTwo.Year),]
nrow(selected.interactions)
minDate <- 1000
maxDate <- 1700
selected.interactions <- multiparty.interactions
those.with.dateOneYear <- selected.interactions[!is.na(selected.interactions$DateOne.Year),]
nrow(selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE,])
selected.interactions <- selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE &
{selected.interactions$DateOne.Year <= maxDate} %in% TRUE ,]
selected.interactions <- selected.interactions[selected.interactions$DateTwo.Year <= maxDate |
is.na(selected.interactions$DateTwo.Year),]
nrow(selected.interactions)
minDate <- 1000
maxDate <- 1650
selected.interactions <- multiparty.interactions
those.with.dateOneYear <- selected.interactions[!is.na(selected.interactions$DateOne.Year),]
nrow(selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE,])
selected.interactions <- selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE &
{selected.interactions$DateOne.Year <= maxDate} %in% TRUE ,]
selected.interactions <- selected.interactions[selected.interactions$DateTwo.Year <= maxDate |
is.na(selected.interactions$DateTwo.Year),]
nrow(selected.interactions)
minDate <- 1601
maxDate <- 1620
selected.interactions <- multiparty.interactions
those.with.dateOneYear <- selected.interactions[!is.na(selected.interactions$DateOne.Year),]
nrow(selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE,])
selected.interactions <- selected.interactions[{selected.interactions$DateOne.Year >= minDate} %in% TRUE &
{selected.interactions$DateOne.Year <= maxDate} %in% TRUE ,]
selected.interactions <- selected.interactions[selected.interactions$DateTwo.Year <= maxDate |
is.na(selected.interactions$DateTwo.Year),]
nrow(selected.interactions)
selected.interactions
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
visNetwork_edges <-
data.frame(
"source" = as.numeric(
mapvalues(
edges$Primary.Emlo_ID, from = nodes$iperson_id, to = 0:(nrow(nodes) - 1),warn_missing = FALSE
)
),
"target" = as.numeric(
mapvalues(
edges$Secondary.Emlo_ID, from = nodes$iperson_id, to = 0:(nrow(nodes) -
1),warn_missing = FALSE
)
),
"source.emlo.id" = edges$Primary.Emlo_ID,
"target.emlo.id" = edges$Secondary.Emlo_ID,
## Times the total number of connections by 10 and add 1 if of the highlighted category type
## Allows for testing off oddness for colour and size for the edge width
"value" = 20 * edges$Total.Connections + edges[,c(input$visNetwork_wholeNetwork_highlightedCategory)],
"LinkColor" = c(rep("lightblue",100),rep("red",nrow(edges) -
100))
)
visNetwork_edges <-
data.frame(
"source" = as.numeric(
mapvalues(
edges$Primary.Emlo_ID, from = nodes$iperson_id, to = 0:(nrow(nodes) - 1),warn_missing = FALSE
)
),
"target" = as.numeric(
mapvalues(
edges$Secondary.Emlo_ID, from = nodes$iperson_id, to = 0:(nrow(nodes) -
1),warn_missing = FALSE
)
),
"source.emlo.id" = edges$Primary.Emlo_ID,
"target.emlo.id" = edges$Secondary.Emlo_ID
)
visNetwork_nodes <- data.frame(
"name" = 0:(nrow(nodes) - 1),
"group" = rep(1,nrow(nodes)),
"size" = rep(1,nrow(nodes)),
"Surname" = nodes$Surname,
"emlo_id" = nodes$iperson_id
)
visN_nodes <- data.frame("id" = visNetwork_nodes$emlo_id,
"title" = visNetwork_nodes$Surname)
visN_edges <- data.frame("from" = visNetwork_edges$source.emlo.id,
"to" = visNetwork_edges$target.emlo.id)
visN_edges
visN_nodes
str(visN_edges)
str(visN_nodes)
visNetwork(visN_nodes, visN_edges)
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
visNetwork(visN_nodes, visN_edges)
visN_nodes <- data.frame("id" = as.numeric(visNetwork_nodes$emlo_id),
"title" = visNetwork_nodes$Surname)
visN_edges <- data.frame("from" = as.numeric(visNetwork_edges$source.emlo.id),
"to" = as.numeric(visNetwork_edges$target.emlo.id))
str(visN_edges)
str(visN_nodes)
visNetwork(visN_nodes, visN_edges)
visN_nodes <- data.frame("id" = as.character(visNetwork_nodes$emlo_id),
"title" = visNetwork_nodes$Surname)
visN_edges <- data.frame("from" = as.character(visNetwork_edges$source.emlo.id),
"to" = as.character(visNetwork_edges$target.emlo.id))
str(visN_edges)
str(visN_nodes)
visNetwork(visN_nodes, visN_edges)
shiny::runApp('shinyapp')
visNetwork_object <- visNetwork(visN_nodes, visN_edges)
str(visNetwork_object)
shiny::runApp('shinyapp')
print(str(visNetwork_Object))
visNetwork_Object <- visNetwork(visN_nodes, visN_edges)
print(str(visNetwork_Object))
visNetwork_Object
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
visNetwork(visN_nodes, visN_edges)
## Create df for visNetwork
visN_nodes <- data.frame("id" = as.character(visNetwork_nodes$emlo_id),
"title" = visNetwork_nodes$name)
visN_edges <- data.frame("from" = as.character(visNetwork_edges$source.emlo.id),
"to" = as.character(visNetwork_edges$target.emlo.id))
visNetwork(visN_nodes, visN_edges)
shiny::runApp('shinyapp')
visN_nodes <- data.frame("id" = as.character(visNetwork_nodes$emlo_id),
"title" = visNetwork_nodes$name,
"label" = visNetwork_nodes$name)
visNetwork(visN_nodes, visN_edges)
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
select.individual.network_graph_selected_individual
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
library(visNetwork)
library(shiny)
server <- function(input, output) {
output$network <- renderVisNetwork({
# minimal example
nodes <- data.frame(id = 1:3, label = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges) %>%
visInteraction(hover = TRUE) %>%
visEvents(hoverNode = "function(nodes) {
Shiny.onInputChange('current_node_id', nodes);
;}")
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
library(visNetwork)
library(shiny)
server <- function(input, output) {
output$network <- renderVisNetwork({
# minimal example
nodes <- data.frame(id = 1:3, label = 1:3)
edges <- data.frame(from = c(1,2), to = c(1,3))
visNetwork(nodes, edges) %>%
visInteraction(hover = TRUE) %>%
visEvents(selectNode = "function(nodes) {
Shiny.onInputChange('current_node_id', nodes);
;}")
})
output$shiny_return <- renderPrint({
input$current_node_id
})
}
ui <- fluidPage(
visNetworkOutput("network"),
verbatimTextOutput("shiny_return")
)
shinyApp(ui = ui, server = server)
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
source('~/Github/EMLO-Visualisations/shinyapp/server/visualisations-and-ui.R')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
foo <- c(1,0,0)
foo <- c(1,0,0,5,6,0)
foo > 0
foo <- foo > 0
foo
mapvalues(foo,c(TRUE,FALSE),c("lightblue","lightred"))
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
color_list <- list(rep("yellow", nrow(visN_edges)))
color_list
class(color_list)
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = "lightblue", highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = list("lightblue","red","blue","black"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = c("lightblue","red","blue","black"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = list("1" = "lightblue",
"2" = "red",
"3" = "blue",
"4" = "black"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = c("1" = "lightblue",
"2" = "red",
"3" = "blue",
"4" = "black"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = c("lightblue","red","blue","black"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = c("#ffb3b3","#ffb3b3","#ffb3b3","#ffb3b3"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = list("#ffb3b3","#ffb3b3","#ffb3b3","#ffb3b3"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE),
color = c("#ffb3b3","#ffb3b3","#ffb3b3","#ffb3b3"))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = list("#ffb3b3","#ffb3b3","#ffb3b3","#ffb3b3"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE),
color = c("lightred","#ffb3b3","#ffb3b3","#ffb3b3"))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = list("#ffb3b3","#ffb3b3","#ffb3b3","#ffb3b3"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE),
color = c("lightred","lightblue","#ffb3b3","#ffb3b3"))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = list("#ffb3b3","#ffb3b3","#ffb3b3","#ffb3b3"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
color = c("red","lightblue","#ffb3b3","#ffb3b3"))
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE),
color = c("red","lightblue","#ffb3b3","#ffb3b3"))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = list("#ffb3b3","#ffb3b3","#ffb3b3","#ffb3b3"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
nodes <- data.frame(id = 1:4, label = 1:4)
edges <- data.frame(from = c(2,4,3,2),
to = c(1,2,4,3),
dashes = c(TRUE, FALSE),
color = c("red","lightblue","lightblue","lightblue"))
visNetwork(nodes, edges, width = "100%") %>%
visEdges(shadow = TRUE,
arrows =list(to = list(enabled = TRUE, scaleFactor = 2)),
color = list(color = list("#ffb3b3","#ffb3b3","#ffb3b3","#ffb3b3"), highlight = "red")) %>%
visLayout(randomSeed = 12) # to have always the same network
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
makeExaggSp <- function(df, myTitle){
L1 <- df[df$is16p=="other",] # df[,1] is expression data, df[,2] has the word 'other' or 'geneOfInterest' when row corrresponds to gene of interest
L1$size <- 2
L1cols <- colnames(L1)
L2 <- df[df$is16p=="geneOfInterest",]
L2$size <- 4
L2cols <- colnames(L2)
# generating line to plot in graph
xVals <- c(1:15)
yVals <- c(1:15)
funLine <- data.frame(xVals,yVals)
print(L1) # this prints before I get the error message
length(L1) # this does not print before I get the error message
ggplot() +
geom_point(
data=L1,
aes_string(x=colnames(L1)[1], y=colnames(L1)[2],
color=shQuote("other"), size="L1$size")
) +
geom_point(
data=L2,
aes_string(x=colnames(L2)[1], y=colnames(L2)[2],
color=shQuote("genes16p"), size="L2$size")
) +
scale_color_manual(name="Val", values=c(other="#105B63",genes16p="#BD4932")) +
labs(title = myTitle) +
geom_point(
data=funLine,
aes(x=xVals, y=yVals)
)
}
title <-'This is a plot'
makeExaggSp(iris,"foo")
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
library(scales)
rescale(visNetwork_edges$Value, to = c(2,10))
rescale(edges$Value, to = c(2,10))
rescale(c(1,3,5,10), to = c(2,10))
shiny::runApp('shinyapp')
rescale(c(1,3,5,7,13,55), to = c(2,10))
round(rescale(c(1,3,5,7,13,55), to = c(2,10)))
shiny::runApp('shinyapp')
shiny::runApp('shinyapp')
setwd("~/Github/EMLO-Visualisations/shinyapp")
people.df <- read.csv("data/master_people_sheet.csv")
## Convert name to character vector for simplicity later
people.df$Person.Name <- as.character(people.df$Person.Name)
## Sort by name
people.df <- people.df[order(people.df$Person.Name),]
life.events.df <- read.csv("data/master_life_events_sheet.csv")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
