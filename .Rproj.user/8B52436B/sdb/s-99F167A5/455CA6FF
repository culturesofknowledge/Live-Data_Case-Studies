{
    "contents" : "networkD3_wholeNetwork_nodes <- reactive({\n  ## Set selected.interactions as all multiparty.interactions\n  selected.interactions <- multiparty.interactions\n  \n  ## Drop excluded categoties from multiparty interactions\n  selected.interactions <-\n    selected.interactions[selected.interactions$Event.or.Relationship.Type != input$networkD3_wholeNetwork_ExcludedCategory,]\n  \n  \n  ## Apply network.edges.function to selected.interactions\n  edges <- network.edges.function(selected.interactions)\n  ## Get nodes from edges\n  nodes.of.network <-\n    unique(c(edges$Primary.Emlo_ID,edges$Secondary.Emlo_ID))\n  \n  ## Subset people.df by nodes in edges\n  nodes <- subset(people.df, iperson_id %in% nodes.of.network)\n  \n  networkD3_nodes <- data.frame(\n    \"name\" = 0:(nrow(nodes) - 1),\n    \"group\" = rep(1,nrow(nodes)),\n    \"size\" = rep(1,nrow(nodes)),\n    \"surname\" = nodes$Surname\n  )\n  ## Return for use\n  \n  networkD3_nodes\n})\n\nnetworkD3_wholeNetwork_edges <- reactive({\n  ## Set selected.interactions as all multiparty.interactions\n  selected.interactions <- multiparty.interactions\n  \n  ## Drop excluded categoties from multiparty interactions\n  selected.interactions <-\n    selected.interactions[selected.interactions$Event.or.Relationship.Type != input$networkD3_wholeNetwork_ExcludedCategory,]\n  \n  \n  ## Apply network.edges.function to selected.interactions\n  edges <- network.edges.function(selected.interactions)\n  ## Get nodes from edges\n  nodes.of.network <-\n    unique(c(edges$Primary.Emlo_ID,edges$Secondary.Emlo_ID))\n  \n  ## Subset people.df by nodes in edges\n  nodes <- subset(people.df, iperson_id %in% nodes.of.network)\n  \n  networkD3_edges <-\n    data.frame(\n      \"source\" = as.numeric(\n        mapvalues(\n          edges$Primary.Emlo_ID, from = nodes$iperson_id, to = 0:(nrow(nodes) - 1),warn_missing = FALSE\n        )\n      ),\n      \"target\" = as.numeric(\n        mapvalues(\n          edges$Secondary.Emlo_ID, from = nodes$iperson_id, to = 0:(nrow(nodes) -\n                                                                      1),warn_missing = FALSE\n        )\n      ),\n      \n      \n      ## Times the total number of connections by 10 and add 1 if of the highlighted category type\n      ## Allows for testing off oddness for colour and size for the edge width\n      \"value\" = 10 * edges$Total.Connections +\n        edges[,c(input$networkD3_wholeNetwork_highlightedCategory)],\n      \"LinkColor\" = c(rep(\"lightblue\",100),rep(\"red\",nrow(edges) -\n                                                 100))\n    )\n})\n\noutput$networkD3_wholeNetwork <- renderForceNetwork({\n  ## If not loaded yet, stop\n  \n  if (is.null(input$networkD3_wholeNetwork_highlightedCategory))\n    return()\n  \n  ## Set selected.interactions as all multiparty.interactions\n  selected.interactions <- multiparty.interactions\n  \n  ## Drop excluded categoties from multiparty interactions\n  selected.interactions <-\n    selected.interactions[selected.interactions$Event.or.Relationship.Type != input$networkD3_wholeNetwork_ExcludedCategory,]\n  \n  \n  ## Apply network.edges.function to selected.interactions\n  edges <- network.edges.function(selected.interactions)\n  ## Get nodes from edges\n  nodes.of.network <-\n    unique(c(edges$Primary.Emlo_ID,edges$Secondary.Emlo_ID))\n  \n  ## Subset people.df by nodes in edges\n  nodes <- subset(people.df, iperson_id %in% nodes.of.network)\n  \n  ## Click script\n  \n  MyClickScript <-\n    \"      d3.select(this).select('circle').transition().duration(750).attr('r', 30);\n  Shiny.onInputChange('current_node_id', nodes)\"\n\n  ## Create df for networkD3\n  \n  ## Map node ids to numbers, recalling nodes MUST go from 0 to nrow(data)-1\n  networkD3_nodes <- data.frame(\n    \"name\" = 0:(nrow(nodes) - 1),\n    \"group\" = rep(1,nrow(nodes)),\n    \"size\" = rep(1,nrow(nodes)),\n    \"surname\" = nodes$Surname\n  )\n  \n  ## Create vector encoding colours for selected event type:\n  \n  networkD3_wholeNetwork_highlightedCategory <-\n    \"FamilyRelationship\"\n  \n  networkD3_edges <-\n    data.frame(\n      \"source\" = as.numeric(\n        mapvalues(\n          edges$Primary.Emlo_ID, from = nodes$iperson_id, to = 0:(nrow(nodes) - 1),warn_missing = FALSE\n        )\n      ),\n      \"target\" = as.numeric(\n        mapvalues(\n          edges$Secondary.Emlo_ID, from = nodes$iperson_id, to = 0:(nrow(nodes) -\n                                                                      1),warn_missing = FALSE\n        )\n      ),\n      \n      \n      ## Times the total number of connections by 10 and add 1 if of the highlighted category type\n      ## Allows for testing off oddness for colour and size for the edge width\n      \"value\" = 10 * edges$Total.Connections +\n        edges[,c(input$networkD3_wholeNetwork_highlightedCategory)],\n      \"LinkColor\" = c(rep(\"lightblue\",100),rep(\"red\",nrow(edges) -\n                                                 100))\n    )\n  \n  forceNetwork(\n    Links = networkD3_edges, Nodes = networkD3_nodes, Source = \"source\",\n    Target = \"target\", Value = \"value\", NodeID = \"surname\", zoom = TRUE,\n    Group = \"group\",\n    fontSize = 10,\n    # linkColour = rep(\"#bf3eff\",nrow(networkD3_edges)),\n    # linkColour = linkColors.by.highlight,\n    linkColour = JS('function(l) { return l.value % 2 == 0 ? \"#ff6666\" : \"lightblue\" }'),\n    opacityNoHover = FALSE\n  )\n})\n",
    "created" : 1453220256306.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "3238897548",
    "id" : "455CA6FF",
    "lastKnownWriteTime" : 1453220199,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}